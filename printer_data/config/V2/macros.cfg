
[gcode_macro G32]
gcode:
    G28
    QUAD_GANTRY_LEVEL
    G28
    G0 X150 Y150 Z30 F3600
   
[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Turn on fans
  SET_FAN_SPEED FAN=controller_fan SPEED=0.50

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING         # Sets SB-leds to homing-mode
  G28                   # Full home (XYZ)
  G90                   # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  #BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Go to purge bucket, heat to target temp, purge, cool to 150, wipe nozzle
  clean_nozzle PURGE={target_extruder} CLEAN=150

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  LIGHTS_ON                       # Turn on lights
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  quad_gantry_level               # Levels the buildplate via QGL
  G28 Z                           # Homes Z again after QGL

  ##  Uncomment for bed mesh (2 of 2)
  #SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  #STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  #bed_mesh_calibrate                 # Starts bed mesh

  # Go to purge bucket, heat to target temp, wipe nozzle
  clean_nozzle CLEAN={target_extruder}

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G91                                              # Incremental positioning 
  G1 X100 E20 F1000                                # Purge line
  G90                                              # Absolut position

[gcode_macro HEATSOAK]
gcode:
    G4 P{params.DWELL}
    
[gcode_macro END_PRINT]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    SET_NOZZLE_LEDS_OFF
    LIGHTS_OFF
    DISABLE_MOTORS

	BED_MESH_CLEAR

    {% if printer['fan_generic controller_fan'] %}
	SET_FAN_SPEED FAN=controller_fan SPEED=0.5
    BEDFANSFAST
	UPDATE_DELAYED_GCODE ID=_DISABLE_COOLING DURATION=300
    {% else %}
        M118 No cooling fan configured
    {% endif %}

    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    STATUS_READY
    START_TEMP_MONITOR

[gcode_macro PRIME_LINE]
gcode: 
    M117 Prime Line
    G92 E0 ;Reset Extruder
    # move z axis 
#    G1 Z14.0 F3000 ;Move Z Axis up
    # move to prime position 
    G1 X5 Y5 Z0.5 F5000.0 ;Move to start position
    G1 X75 Y5 Z0.5 F1500.0 E15 ;Draw the first line
#    G1 X4 Y200.0 Z0.3 F5000.0 ;Move to side a little
#    G1 X4 Y50 Z0.3 F1500.0 E30 ;Draw the second line
    G92 E0 ;Reset Extruder
    G1 Y10 Z5.0 F3000 ;Move Z Axis up
    G1 X2 Y5 Z0.3

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro LOW_TEMP_CHECK]
variable_extruder: 210
gcode: 
    {% if printer.extruder.target != 0 %} # if there is a setpoint for extruder
        {% if printer.extruder.temperature < printer.extruder.target %} # if not reached, heat
            M118 Heating from {printer.extruder.temperature} to {printer.extruder.target}.
            M109 S{printer.extruder.target|float} 
        {% endif %}
    {% else %} # if no setpoint for extruder
        {% if printer.extruder.target < T %}  # heat to T.
            M118 No setpoint, heating to {T}.
            M109 S{T}
        {% endif %}
    {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 12.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

# load filament
[gcode_macro M701]
gcode:
    SAVE_GCODE_STATE NAME=loading_filament
    M117 Loading Filament
    M83
    G92 E0.0
#    LOW_TEMP_CHECK
    G1 E50 F300  # length of bowden tube till cold-end (~420mm) 
    G1 E20 F150  # some extra to prime the nozzle --> slower 
    G92 E0.0
    RESTORE_GCODE_STATE NAME=loading_filament
    
# unload filament
[gcode_macro M702]
gcode:
    SAVE_GCODE_STATE NAME=unloading_filament
    M125 # park
    M117 Unloading Filament 
#    LOW_TEMP_CHECK
    G91 # set relative
    G1 E1 F100 
    G92 E0.0
    G1 E-100 F500 # the E is the length of the bowden tube (420mm) + 100 mm. 
    G92 E0.0
    RESTORE_GCODE_STATE NAME=unloading_filament

# filament change 
[gcode_macro M600]
gcode:
    M117 Filament Change
    M118 Filament Change
    SAVE_GCODE_STATE NAME=filament_change
    PAUSE
#    LOW_TEMP_CHECK
    G91 # relative
    G1 E-1 F300 # retract 1
#    M125 # park
    M702 # unload

    M117 New filament
    M118 New filament
    COUNTDOWN TIME=60 MSG="Switch"
    M701 # load
    COUNTDOWN TIME=10 MSG="Clean"
#    RESUME
#    M117 Resuming
#    M118 Resuming
    RESTORE_GCODE_STATE NAME=filament_change
    M117 Printing..
    M118 Printing..

#filament change
#[gcode_macro M600]
#variable_parameter_X: 50
#variable_parameter_Y: 0
#variable_parameter_Z: 40
#gcode:
#    SAVE_GCODE_STATE NAME=M600_state
#    PAUSE
#    G91
#    G1 E-.8 F2700
#    G1 Z{Z}
#    G90
#    G1 X{X} Y{Y} F3000
#    G91
#    G1 E-100 F1000
#    COUNTDOWN TIME=30 MSG="Switch"
#    G92 E0.0
#    G1 E150 F300 # prime
#   RESTORE_GCODE_STATE NAME=M600_state

#[gcode_macro COUNTDOWN]
#variable_parameter_MSG: "Time: "
#variable_parameter_TIME: 10
#gcode: 
#    # countdown 
#    {% for s in range(TIME|int, 0, -1) %}
#        # dwell 1 second
#        G4 P1000
#        # echo
#        M117 {params.MSG} {s}s
#        M118 {params.MSG} {s}s
#    {% endfor %}

[gcode_macro COUNTDOWN]
gcode:
    {% set MSG = params.MSG|default("Time: ") %}
    {% set TIME = params.TIME|default(10) %}
    # countdown 
    {% for s in range(TIME|int, 0, -1) %}
        # dwell 1 second
        G4 P1000
        # echo
        M117 {params.MSG} {s}s
        M118 {params.MSG} {s}s
    {% endfor %}

[gcode_macro DISABLE_MOTORS]
gcode:
    M18

[gcode_macro LIGHTS_ON]
gcode:
    SET_PIN PIN=caselight VALUE=1.0

[gcode_macro LIGHTS_OFF]
gcode:
    SET_PIN PIN=caselight VALUE=0.0

[gcode_macro LIGHTS_TOGGLE]
gcode:
      {% if printer["output_pin caselight"].value == 1.0 %}
          LIGHTS_OFF
      {% else %}
          LIGHTS_ON
      {% endif %}

[gcode_macro ANIMATE]
gcode:
    {% for i in range(10) %}
        {% for j in range(0,3) %}
            set_led led=sb_leds white=0 red={ (range(0,1000) | random ) / 1000 | float} green={ (range(0,1000) | random ) / 1000 | float} blue={ (range(0,1000) | random ) / 1000 | float} index={(j % 3) + 1} transmit=0
            set_led led=sb_leds white=0 red={ (range(0,1000) | random ) / 1000 | float} green={ (range(0,1000) | random ) / 1000 | float} blue={ (range(0,1000) | random ) / 1000 | float} index={((j+1) % 3) + 1} transmit=0
            set_led led=sb_leds white=0 red={ (range(0,1000) | random ) / 1000 | float} green={ (range(0,1000) | random ) / 1000 | float} blue={ (range(0,1000) | random ) / 1000 | float} index={((j+2) % 3) + 1} transmit=1
            G4 P300
        {% endfor %}
    {% endfor %}

[gcode_macro MAINTENANCE]
#
# MAINTENANCE
#
# Move the toolhead to 4/5 max above the bed and the front centre
#
description: move the toolhead to a convenient position for working on it
gcode:

  {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

  {% set mid_x = max_x / 2.0 %}
  {% set z80 = max_z * 0.5 %}

  STATUS_BUSY
  HOME_IF_NEEDED
  G0 X{mid_x} Y0 Z{z80} F10000
  STATUS_READY

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E100 F{max_velocity} # fast-load
    G1 E25 F{speed} # purge

    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E25 F{speed} # purge
    G1 E-150 F{max_velocity} # fast-unload

    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

